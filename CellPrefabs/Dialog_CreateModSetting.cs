using RimWorld;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using UnityEngine;
using Verse;
using Random = System.Random;

namespace CellPrefabs
{
    internal class Dialog_CreateModSetting : Window
    {

        private const string PACKAGE_ID_SUFFIX = ".cellprefabs.buildings";
        private string customName = "";
        private string customPackageId = "";
        private string autoGeneratedName;
        private string autoGeneratedPackageId;
        private Action<string, string> onConfirmCallback;
        private Vector2 scrollPosition = Vector2.zero;

        public override Vector2 InitialSize => new Vector2(500, 300);

        public Dialog_CreateModSetting(Action<string, string> callback)
        {
            onConfirmCallback = callback;
            closeOnCancel = true;
            forcePause = true;
            absorbInputAroundWindow = true;
            doCloseX = true;
        }

        public override void DoWindowContents(Rect inRect)
        {
            Text.Font = GameFont.Medium;
            Widgets.Label(new Rect(inRect.x + 10, inRect.y + 10, inRect.width, 30), "设置Mod元数据");
            Text.Font = GameFont.Small;

            Rect contentRect = new Rect(inRect.x + 10, inRect.y + 50, inRect.width - 20, inRect.height - 60);
            Widgets.BeginScrollView(contentRect, ref scrollPosition, new Rect(0, 0, contentRect.width, 180));

            // 自动生成部分
            autoGeneratedName = GenerateAutoName();
            autoGeneratedPackageId = GenerateAutoPackageId();

            // Name字段
            Widgets.Label(new Rect(0, 0, 120, 30), "Mod名称:");
            customName = Widgets.TextField(new Rect(130, 0, 350, 30), customName.NullOrEmpty() ? autoGeneratedName : customName);
            if (Widgets.ButtonText(new Rect(490, 0, 60, 30), "生成"))
            {
                customName = autoGeneratedName;
            }


            // PackageId字段 (前缀 + 固定后缀)
            Widgets.Label(new Rect(0, 60, 120, 30), "PackageId:");

            // 调整前缀输入框宽度，增加后缀显示空间
            Rect prefixRect = new Rect(130, 60, 100, 30); // 原240 → 270，增加30像素宽度
            customPackageId = Widgets.TextField(prefixRect,
                customPackageId.NullOrEmpty() ? autoGeneratedPackageId : customPackageId);

            // 后缀显示区域左移并加宽
            Rect suffixRect = new Rect(prefixRect.xMax + 5, 60, 120, 30); // 原105 → 120，增加15像素宽度
            GUI.enabled = false;
            Widgets.TextField(suffixRect, PACKAGE_ID_SUFFIX);
            GUI.enabled = true;

            // 生成按钮位置调整
            if (Widgets.ButtonText(new Rect(suffixRect.xMax + 5, 60, 60, 30), "生成"))
            {
                customPackageId = autoGeneratedPackageId;
            }

            Widgets.EndScrollView();

            // 确认按钮
            if (Widgets.ButtonText(new Rect(inRect.width / 2 - 75, inRect.height - 40, 150, 30), "确认导出"))
            {
                if (ValidateInput())
                {
                    onConfirmCallback?.Invoke(customName, customPackageId);
                    Close();
                }
            }
        }

        private bool ValidateInput()
        {
            if (customName.NullOrEmpty())
            {
                Messages.Message("Mod名称不能为空", MessageTypeDefOf.RejectInput);
                return false;
            }
            if (customPackageId.NullOrEmpty() || !IsValidPackageId(customPackageId))
            {
                Messages.Message("PackageId格式错误", MessageTypeDefOf.RejectInput);
                return false;
            }
            return true;
        }

        private string GenerateAutoName()
        {
            string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            return $"CellPrefabs_UndefineName_{timestamp}";
        }

        private string GenerateAutoPackageId()
        {
            string randomStr = GenerateRandomString(6); // 使用原有随机函数
            return randomStr;
        }

        private bool IsValidPackageId(string id)
        {
            return Regex.IsMatch(id, @"^[a-zA-Z0-9_-]+$");
        }

        private static string GenerateRandomString(int length)
        {
            const string chars = "abcdefghijklmnopqrstuvwxyz";
            Random random = new Random();
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        private bool IsValidName(string name)
        {
            return Regex.IsMatch(name, @"^[\u4e00-\u9fa5a-zA-Z0-9_]+$");
        }
    }

}
